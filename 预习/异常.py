"""
1
程序停止执行并抛出错误信息叫抛出异常（报错）

2
通过捕获异常以针对突发事件做出集中处理从而保证程序的稳定性和健壮性
try:
    代码（不能确定可以正确执行的代码）
except:
    try中的错误的处理代码（执行完后继续往后执行[到except外]）

3
错误类型捕获：遇到不同类型的异常，要针对不同类型的异常做出不同的反应
try:
    代码（不能确定可以正确执行的代码）
except 错误类型1:
    try中的错误类型1的处理代码（执行完后继续往后执行[到except外]）
except 错误类型2, 错误类型3:
    try中的错误类型2和3的处理代码（执行完后继续往后执行[except外]）
错误类型：抛出异常（报错）的最后一行的第一个单词（通常为...Error）

4
捕获未知错误：希望程序无论出现任何错误都不会因为抛出异常而停止，预判到所有错误有难度
......
except Exception as 变量名:  # 这个变量名应该没什么用处，存在是为了Python将错误原因自动填进这个变量例子在下面
    try中的错误的处理代码（执行完后继续往后执行[到except外]）
    # 例子：
    print("未知错误 %s" % 变量名)  # 例如n/input(0)就是：未知错误 division by zero

5
异常捕获完整语法：
try:
    ...
except...
...
else:
    没有异常才会执行的代码
finally:
    无论是否有异常都会执行的代码

6
异常的传递：当函数/方法执行出现异常就会将异常传递给函数/方法的调用一方
如果传递到主程序中异常还没有被处理异常就会被终止
在主程序中添加异常捕获
保证代码的简洁

7
主动抛出异常：根据应用程序特有的业务需求主动抛出异常
可以主动抛出异常，由其他需要处理的函数捕获异常

8
Python提供了一个Exception类
1)创建一个Exception的对象
2)使用raise关键字抛出异常对象
XXX=Exception("提示语")
raise XXX
可以在主程序血4捕获未知错误
"""

# 1. 什么是异常？
# 让程序停止执行的错误信息叫异常

# 2. 异常有哪些类型？（如何找到全部的异常类型？)
# 看Error报错信息

# 3. 如何捕获异常？
# try:
#     ...
# except...
# ...
# else:
#     没有异常才会执行的代码
# finally:
#     无论是否有异常都会执行的代码

# 4. 如何抛出异常？
# Python提供了一个Exception类
# 1)创建一个Exception的对象
# 2)使用raise关键字抛出异常对象
# XXX=Exception("提示语")
# raise XXX

# 5. 什么是异常的传递？
# 异常的传递：当函数/方法执行出现异常就会将异常传递给函数/方法的调用一方
# 如果传递到主程序中异常还没有被处理异常就会被终止
